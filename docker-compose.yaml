services:
  db:
    image: postgres:13
    ports:
      - "${DATABASE_PORT}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 40s
      timeout: 20s
      retries: 30
    networks:
      - stts_app_network

  alembic:
    build: .
    command: bash -c "/usr/local/bin/wait-for-it db:${DATABASE_PORT} -- alembic upgrade head"
    environment:
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app
    networks:
      - stts_app_network

  web:
    tty: true
    stdin_open: true
    build: .
    dns:
      - 8.8.8.8
      - 8.8.4.4
    ports:
      - "${FLASK_PORT}:${FLASK_PORT}"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - HTTP_PROXY=
      - HTTPS_PROXY=
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    command: bash -c "/usr/local/bin/wait-for-it db:${DATABASE_PORT} -- /usr/local/bin/wait-for-it redis:${REDIS_PORT} -- gunicorn -c gunicorn.conf.py --worker-class eventlet -w 1 run:app"
    networks:
      - stts_app_network

  redis:
    image: redis:alpine
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stts_app_network

  celery:
    build: .
    command: bash -c "/usr/local/bin/wait-for-it db:${DATABASE_PORT} -- /usr/local/bin/wait-for-it redis:${REDIS_PORT} -- celery -A celery_worker:celery worker --loglevel=info"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - .:/app
    networks:
      - stts_app_network


volumes:
  postgres_data:

networks:
  stts_app_network:
    external: true
